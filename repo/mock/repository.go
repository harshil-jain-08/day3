// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/harshil-jain-08/day3/repo (interfaces: Repository)

// Package repomock is a generated GoMock package.
package repomock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	Models "github.com/harshil-jain-08/day3/Models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteRecord mocks base method.
func (m *MockRepository) DeleteRecord(arg0 *Models.Record, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockRepositoryMockRecorder) DeleteRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockRepository)(nil).DeleteRecord), arg0, arg1)
}

// GetRecord mocks base method.
func (m *MockRepository) GetRecord(arg0 *[]Models.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockRepositoryMockRecorder) GetRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockRepository)(nil).GetRecord), arg0)
}

// GetRecordByRoll mocks base method.
func (m *MockRepository) GetRecordByRoll(arg0 *[]Models.Record, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordByRoll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRecordByRoll indicates an expected call of GetRecordByRoll.
func (mr *MockRepositoryMockRecorder) GetRecordByRoll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordByRoll", reflect.TypeOf((*MockRepository)(nil).GetRecordByRoll), arg0, arg1)
}

// GetRecordByRollAndSub mocks base method.
func (m *MockRepository) GetRecordByRollAndSub(arg0 *Models.Record, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordByRollAndSub", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRecordByRollAndSub indicates an expected call of GetRecordByRollAndSub.
func (mr *MockRepositoryMockRecorder) GetRecordByRollAndSub(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordByRollAndSub", reflect.TypeOf((*MockRepository)(nil).GetRecordByRollAndSub), arg0, arg1, arg2)
}

// GetRecordBySubject mocks base method.
func (m *MockRepository) GetRecordBySubject(arg0 *[]Models.Record, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordBySubject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRecordBySubject indicates an expected call of GetRecordBySubject.
func (mr *MockRepositoryMockRecorder) GetRecordBySubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordBySubject", reflect.TypeOf((*MockRepository)(nil).GetRecordBySubject), arg0, arg1)
}

// SaveRecord mocks base method.
func (m *MockRepository) SaveRecord(arg0 *Models.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRecord indicates an expected call of SaveRecord.
func (mr *MockRepositoryMockRecorder) SaveRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecord", reflect.TypeOf((*MockRepository)(nil).SaveRecord), arg0)
}
